#!/usr/bin/php
<?php
require("a2.php");
//$usage = "Usage: $argv[0] ActorName";
$db = dbConnect(DB_CONNECTION);

//$name1 = "tom cruise";//539
//$name2 = "Jeremy Renner";//1685

$solution_num=0;
$start_name = $argv[1];
$end_name = $argv[2];
$debug=0;
//lower the strings

$start_name = strtolower($start_name);
$end_name = strtolower($end_name);
$end_name_id = actor_name_to_id($end_name);

$to_do_name = new SplQueue();

$to_do_name ->enqueue($start_name);

$found_solution = 0;
//the big loop
$visited_name[]= $start_name;
while($to_do_name->count()>0){
    
    $curr_actor_name = $to_do_name->dequeue();
    $curr_actor_name = strtolower($curr_actor_name);
   
    //echo "curr actor is $curr_actor_name\n";

    //find all the neighbour names
    $neighbour_actors_ids = actor_ids_of_related_actor($curr_actor_name);

    //if found the end name
    if(in_array($end_name_id, $neighbour_actors_ids)){
        if(!isset($prev[$end_name]) or !in_array($curr_actor_name, $prev[$end_name])){
            $found_solution=1;
            $solution_num ++;
            $prev[$end_name][]=$curr_actor_name;
            $debug++;
        }

    }
    //if not found
    else{
        //find if there exist a solution that curr's neighbour can reach

        foreach($neighbour_actors_ids as $next_actor_id){
            $next_actor_name = actor_id_to_name($next_actor_id);
            //echo "try to compare $next_actor_name and $end_name\n";
            if( relation_movie_ids($next_actor_name,$end_name)!=null){
                //echo "found $next_actor_name, $end_name as end\n";
                if(!isset($prev[$end_name]) or !in_array($next_actor_name, $prev[$end_name])){
                    $prev[$end_name][]=$next_actor_name;
                    $found_solution=1;
                    $debug++;
                    $solution_num++;
                }
            }

        }
        foreach($neighbour_actors_ids as $next_actor_id){
            $next_actor_name = actor_id_to_name($next_actor_id);

            
            if($found_solution==0  && !in_array($next_actor_name, $visited_name)){
                $to_do_name ->enqueue( $next_actor_name);
            }
            if( !in_array($next_actor_name, $visited_name)){
                //echo "$next_actor_name\n";
                if(!isset($prev[$next_actor_name]) or !in_array($curr_actor_name, $prev[$next_actor_name])){
                    $prev[$next_actor_name][]= $curr_actor_name;
                }    

                $visited_name[] = $next_actor_name;
            }
        }
    }
}


echo "$solution_num solution found\n";


foreach($prev[$end_name] as $actor_name){ 
    echo "prev before $end_name is $actor_name\n";
}
echo"$debug\n";


$string;
$string_index=0;
printPaths($end_name); 

foreach($string as $str){
    echo "$str";
}


/*
foreach($string as $str){
    $final_strings = null;  
    store_movie_string
    array_push($final_string, )
}
*/














//this part of code(printPaths, printPathsRecur) is copied from https://www.geeksforgeeks.org/given-a-binary-tree-print-all-root-to-leaf-paths/
//and changed from language java to php
function printPaths($node){
    
        $path[]=null;
        printPathsRecur($node, $path, 0); 
    } 

function printPathsRecur($node, $path, $pathLen){ 

    global $start_name;
    global $prev;
    if ($node == null){
        return; 
    }
    
    /* append this node to the path array */
    $path[$pathLen] = $node; 
    $pathLen++; 

    /* it's a leaf, so print the path that led to here  */
    if (!isset($prev[$node])) {
        storeArray($path, $pathLen); 
    }
    else 
    { 
        /* otherwise try both subtrees */
        foreach($prev[$node] as $prev_name){
            printPathsRecur($prev_name, $path, $pathLen);
        }
    } 
} 

function storeArray($array, $len) {
        global $string;
        global $string_index;
        $i=$len-1;
        
        while ($i >= 0)  
        { 
            if(!isset($string[$string_index])){
                $string[$string_index]=$array[$i];
            }
            else{
                $string[$string_index]= $string[$string_index]."&".$array[$i];
            } 
            $i--;
        } 
        $string[$string_index]= $string[$string_index]."\n";
        $string_index++;
    } 


//return id of a actor given by his/her name
function actor_name_to_id($name){
    $name = str_replace("'","''",$name);
    $db = dbConnect(DB_CONNECTION);
    $name = strtolower($name);
    $q = "select id from actor where lower(name) = '".$name."'";
    $r = dbQuery($db, $q);
    $id = dbNext($r)[0];
    return $id;
}
function actor_id_to_name($id){
    $db = dbConnect(DB_CONNECTION);
    $q = "select name from actor where id = ".$id;
    $r = dbQuery($db, $q);
    $name = dbNext($r)[0];
    $name = strtolower($name);
    return $name;
}

//return movie_ids that 2 actors are related on, return null if no such match
function relation_movie_ids($name1, $name2){
   
    $db = dbConnect(DB_CONNECTION);
    $id1 = actor_name_to_id($name1);
    $id2= actor_name_to_id($name2);
    $movie_ids=[];
    $q = " select movie_id  from (select movie_id, count(movie_id) as count_num from acting where actor_id = ".$id1."or actor_id = ".$id2."  group by movie_id order by count_num desc) as a where count_num=2";
    $r = dbQuery($db, $q);
    
    while($movie_id = dbNext($r)[0]){

        $movie_ids[] = $movie_id;
    }
 
    return $movie_ids;
}

//from $movie_ids array into movie_names_array
function relation_movie_names($movie_ids){
    
    $db = dbConnect(DB_CONNECTION);
    foreach ($movie_ids as $movie_id){
        $q = "select title from movie where id = ".$movie_id;
        $r = dbQuery($db, $q);
        $movie_names[] = dbNext($r)[0];
    }
   
    return $movie_names;
}


//return the movie_ids of an actor

function movie_ids_of_an_actor($name){
    $db = dbConnect(DB_CONNECTION);
    $id = actor_name_to_id($name);
    $q = "select movie_id from acting where actor_id = ".$id;
    $r = dbQuery($db, $q);
    while($movie_id = dbNext($r)[0]){
        $movie_ids[]=$movie_id;
    }
    return $movie_ids;
}

//return a list of actor id from an actor
function actor_ids_of_related_actor($name){
    $db = dbConnect(DB_CONNECTION);
    $id = actor_name_to_id($name);

    //first find the movies id of an actor
    $movie_ids = movie_ids_of_an_actor($name);
    //then find the actor ids of each movie where actor_name != $name


    foreach($movie_ids as $movie_id){
        $q = "select actor_id from acting where movie_id = ".$movie_id."and actor_id !=".$id;
        $r = dbQuery($db, $q);
        while($actor_id = dbNext($r)[0]){
            $actor_ids[]= $actor_id;
        }
    }
    return $actor_ids;
}


?>