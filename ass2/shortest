#!/usr/bin/php
<?php
require("a2.php");
//$usage = "Usage: $argv[0] ActorName";
$db = dbConnect(DB_CONNECTION);

//$name1 = "tom cruise";//539
//$name2 = "Jeremy Renner";//1685

$solution_num=0;
$start_name = $argv[1];
$end_name = $argv[2];
$debug=0;
//lower the strings

$start_name = strtolower($start_name);
$end_name = strtolower($end_name);
$end_name_id = actor_name_to_id($end_name);

$to_do_name = new SplQueue();

$to_do_name ->enqueue($start_name);

$found_solution = 0;
//the big loop
$visited_name[]= $start_name;
$degree[$start_name]=0;
//$max_degree = -1;
//try to build the true length

$max_degree = getLength();
//echo "got $max_degree max degree\n";
while($to_do_name->count() > 0){
   
    $curr_actor_name = $to_do_name->dequeue();
    $curr_actor_name = strtolower($curr_actor_name);
    //echo "doing $curr_actor_name\n";
    if($max_degree !=-1 && $degree[$curr_actor_name] >= $max_degree ){
        //echo "you should not see me\n";
        continue;
    }

    $neighbour_actors_ids = actor_ids_of_related_actor($curr_actor_name);

    //if found result in neighbours
    if(in_array($end_name_id, $neighbour_actors_ids)){
        if($max_degree== -1){
            $max_degree = $degree[$curr_actor_name]+1;
         }
        if(!isset($prev[$end_name]) or !in_array($curr_actor_name, $prev[$end_name])){
             $prev[$end_name][]=$curr_actor_name;
             $found_solution++;
             
        }
    }
    //did not found any end_name in neighbours
    else{
        //add all the neighbours that are less thean max degree into the $todo_name 
        foreach($neighbour_actors_ids as $next_actor_id){
            $next_actor_name = actor_id_to_name($next_actor_id);
           



            if(in_array($next_actor_name, $visited_name)){
                if(!isset($prev[$next_actor_name][0]) or !in_array($curr_actor_name, $prev[$next_actor_name])){
                    if(isset($degree[$next_actor_name]) && $degree[$next_actor_name]>$degree[$curr_actor_name]){
                    $prev[$next_actor_name][]= $curr_actor_name;
                    }
                }
                continue;
            }
            $visited_name[]=$next_actor_name;
            if(!isset($degree[$next_actor_name]) || ($degree[$next_actor_name]> $degree[$curr_actor_name]+1)){
                if(isset($degree[$next_actor_name]) && $degree[$next_actor_name]> $degree[$curr_actor_name]+1){
                    echo "refreshing degree\n";
                }
                
                $degree[$next_actor_name] = $degree[$curr_actor_name]+1;
            }
            //if next actor is still in the length
            if($degree[$next_actor_name] < $max_degree){
            
            if(!isset($prev[$next_actor_name][0]) or !in_array($curr_actor_name, $prev[$next_actor_name])){
                $prev[$next_actor_name][]= $curr_actor_name;
            }
               $to_do_name ->enqueue( $next_actor_name);
            }
        }

    }
}   
/*
echo "out of bfs loop\n";
echo "printing all prev[Jacqueline Bisset]\n";
$temp3= "jacqueline bisset";
foreach($prev[$temp3] as $prev_name){
    echo "$prev_name\n";
}
*/

/*
while($to_do_name->count()>0){
    
    $curr_actor_name = $to_do_name->dequeue();
    $curr_actor_name = strtolower($curr_actor_name);
   
    

    //find all the neighbour names
    $neighbour_actors_ids = actor_ids_of_related_actor($curr_actor_name);

    //if found the end name
    if(in_array($end_name_id, $neighbour_actors_ids)){
        if(!isset($prev[$end_name]) or !in_array($curr_actor_name, $prev[$end_name])){
            $found_solution=1;
            $solution_num ++;
            $prev[$end_name][]=$curr_actor_name;
            $debug++;
        }

    }
    //if not found
    else{
        //find if there exist a solution that curr's neighbour can reach

        foreach($neighbour_actors_ids as $next_actor_id){
            $next_actor_name = actor_id_to_name($next_actor_id);
            //echo "try to compare $next_actor_name and $end_name\n";
            if( relation_movie_ids($next_actor_name,$end_name)!=null){
                //echo "found $next_actor_name, $end_name as end\n";
                if(!isset($prev[$end_name]) or !in_array($next_actor_name, $prev[$end_name])){
                    $prev[$end_name][]=$next_actor_name;
                    $found_solution=1;
                    $debug++;
                    $solution_num++;
                }
            }

        }
        foreach($neighbour_actors_ids as $next_actor_id){
            $next_actor_name = actor_id_to_name($next_actor_id);

            
            if($found_solution==0  && !in_array($next_actor_name, $visited_name)){
                $to_do_name ->enqueue( $next_actor_name);
            }
            if( !in_array($next_actor_name, $visited_name)){
                //echo "$next_actor_name\n";
                if(!isset($prev[$next_actor_name]) or !in_array($curr_actor_name, $prev[$next_actor_name])){
                    $prev[$next_actor_name][]= $curr_actor_name;
                }    

                $visited_name[] = $next_actor_name;
            }
        }
    }
}


echo "$solution_num solution found\n";


foreach($prev[$end_name] as $actor_name){
    echo "prev before $end_name is $actor_name\n";
}
echo"$debug\n";
*/












$string;
$string_index=0;
printPaths($end_name); 
/*
echo "$found_solution solutions found\n";

echo "start\n";
foreach($string as $str){
    echo "$str\n";
}
echo "end\n";
*/




$target_string=null;
foreach($string as $str){
    global $end_name;
    $name_array = explode('&', $str);
    $curr_index=0;
    $next_index=1;
    $path=null;
    
    dfs($name_array,$curr_index, $path);
}
/*
echo "final output:\n";
*/
$i=1;
sort($target_string);
foreach($target_string as $str){
    echo "$i. $str\n";
    $i++;
}
//$temp = "jacqueline bisset";
//echo "degree of jacqueline is $degree[$temp]\n";
//debugstart
/*
$temp2 = "ben gazzara";
echo "degree of ben gazzara is $degree[$temp2]\n";
echo "max degree is $max_degree\n";
$temp3= "jacqueline bisset";
echo "printing all prev[Jacqueline Bisset]\n";
foreach($prev[$temp3] as $prev_name){
    echo "$prev_name\n";
}
*/


//debug end


function dfs($name_array,$curr_index, $path){
    global $target_string;
    global $end_name;
    global $prev;
    $next_index = $curr_index +1;
    $curr_actor_name = $name_array[$curr_index];
    if(!isset($curr_actor_name)){
        return;
    }


    
    
    //if this is the last element
    if($name_array[$curr_index]==$end_name){
        //echo "i was here, $path\n";
        $target_string[]= $path;
        return;
    }
    else{
        $curr_name_with_capital = to_capital_name($name_array[$curr_index]);
        $path = $path.$curr_name_with_capital;
        $relation_movies_ids = relation_movie_ids($curr_actor_name, $name_array[$next_index]);
        $relation_movies_names = relation_movie_names($relation_movies_ids);
        
        foreach($relation_movies_names as $movie_name){
            $next_name_with_capital = to_capital_name($name_array[$next_index]);
            $time = get_movie_time($movie_name);
            if($time!=null){
                $new_path= $path." was in ".$movie_name." (".$time.")"." with ".$next_name_with_capital;
            }
            else{
                $new_path= $path." was in ".$movie_name." with ".$next_name_with_capital;
            }
            if($name_array[$next_index]!=$end_name){
                $new_path= $new_path."; ";
            }

            dfs($name_array,$next_index, $new_path);
        }        
    }
        
       
}




/*
foreach($string as $str){
    global $end_name;
    $name_array = explode('&', $str);
    $curr_index=0;
    $next_index=1;
        echo "\n";
    while($name_array[$curr_index]!=$end_name){
        $curr_name = $name_array[$curr_index];
        $next_name = $name_array[$next_index];
        echo "calling $curr_name and $next_name\n";
        $relation_movies_ids = relation_movie_ids($curr_name, $next_name);
        $relation_movies_names = relation_movie_names($relation_movies_ids);
        echo 
        $curr_index++;
        $next_index++;
        
    }
}
*/



//this part of code(printPaths, printPathsRecur) is copied from https://www.geeksforgeeks.org/given-a-binary-tree-print-all-root-to-leaf-paths/
//and changed from language java to php



function printPaths($node){
    
        $path[]=null;
        printPathsRecur($node, $path, 0); 
    } 

function printPathsRecur($node, $path, $pathLen){ 

    global $start_name;
    global $prev;
    if ($node == null){
        return; 
    }
    
    /* append this node to the path array */
    $path[$pathLen] = $node; 
    $pathLen++; 

    /* it's a leaf, so print the path that led to here  */
    if (!isset($prev[$node])) {
        storeArray($path, $pathLen); 
    }
    else 
    { 
        /* otherwise try both subtrees */
        foreach($prev[$node] as $prev_name){
            printPathsRecur($prev_name, $path, $pathLen);
        }
    } 
} 

function storeArray($array, $len) {
        global $string;
        global $string_index;
        $i=$len-1;
        
        while ($i >= 0)  
        { 
            if(!isset($string[$string_index])){
                $string[$string_index]=$array[$i];
            }
            else{
                $string[$string_index]= $string[$string_index]."&".$array[$i];
            } 
            $i--;
        } 
        $string[$string_index]= $string[$string_index];
        $string_index++;
    } 


function get_movie_time($movie_name){
    $movie_name = str_replace("'","''",$movie_name);
    $db = dbConnect(DB_CONNECTION);
    $q = "select year from movie where title = '".$movie_name."'";
    $r = dbQuery($db,$q);
    $t = dbNext($r);
    $year = $t[0];
    return $year; 
}





function to_capital_name($name){
    $db = dbConnect(DB_CONNECTION);
    $id = actor_name_to_id($name);
    $q = "select name from actor where id = ".$id;
    $r = dbQuery($db, $q);
    $t = dbNext($r);
    $name = $t[0];
    return $name;
}






//return id of a actor given by his/her name
function actor_name_to_id($name){
    $name = str_replace("'","''",$name);
    $db = dbConnect(DB_CONNECTION);
    $name = strtolower($name);
    //echo "name is $name\n";
    $q = "select id from actor where lower(name) = '".$name."'";
    //echo "$q\n";
    $r = dbQuery($db, $q);
    $t = dbNext($r);
    $id = $t[0];
    
    return $id;
}
function actor_id_to_name($id){
    $db = dbConnect(DB_CONNECTION);
    $q = "select name from actor where id = ".$id;
    $r = dbQuery($db, $q);
    $t = dbNext($r);
    $name = $t[0];
    $name = strtolower($name);
    return $name;
}

//return movie_ids that 2 actors are related on, return null if no such match
function relation_movie_ids($name1, $name2){
   
    $db = dbConnect(DB_CONNECTION);
    $id1 = actor_name_to_id($name1);
    $id2= actor_name_to_id($name2);
    //echo "name2 is $name2 and id2 is $id2\n";
    $movie_ids;
    $q = " select movie_id  from (select movie_id, count(movie_id) as count_num from acting where actor_id = ".$id1."or actor_id = ".$id2."  group by movie_id order by count_num desc) as a where count_num=2";
    $r = dbQuery($db, $q);
    
    while($t = dbNext($r)){
        $movie_id = $t[0];
        $movie_ids[] = $movie_id;
    }
 
    return $movie_ids;
}

//from $movie_ids array into movie_names_array
function relation_movie_names($movie_ids){
    
    $db = dbConnect(DB_CONNECTION);
    foreach ($movie_ids as $movie_id){
        $q = "select title from movie where id = ".$movie_id;
        $r = dbQuery($db, $q);
        $t = dbNext($r);
        $movie_names[] = $t[0];
        
    }
   
    return $movie_names;
}


//return the movie_ids of an actor

function movie_ids_of_an_actor($name){
    $db = dbConnect(DB_CONNECTION);
    $id = actor_name_to_id($name);
    $q = "select movie_id from acting where actor_id = ".$id;
    $r = dbQuery($db, $q);
    while($t = dbNext($r)){
        $movie_id = $t[0];
        $movie_ids[]=$movie_id;
    }
    return $movie_ids;
}

//return a list of actor id from an actor
function actor_ids_of_related_actor($name){
    $db = dbConnect(DB_CONNECTION);
    $id = actor_name_to_id($name);

    //first find the movies id of an actor
    $movie_ids = movie_ids_of_an_actor($name);
    //then find the actor ids of each movie where actor_name != $name


    foreach($movie_ids as $movie_id){
        $q = "select actor_id from acting where movie_id = ".$movie_id."and actor_id !=".$id;
        $r = dbQuery($db, $q);
        while($t = dbNext($r)){
            $actor_id = $t[0];
            $actor_ids[]= $actor_id;
        }
    }
    return $actor_ids;
}

function getLength(){
    global $start_name;
    global $end_name;
    global $end_name_id;
    $to_do_name = new SplQueue();
    $to_do_name ->enqueue($start_name);
    $degree[$start_name]=0;
    $max_degree = -1;
    while($to_do_name->count() > 0){
        $curr_actor_name = $to_do_name->dequeue();
        $curr_actor_name = strtolower($curr_actor_name);
        $neighbour_actors_ids = actor_ids_of_related_actor($curr_actor_name);

        //if found result in neighbours
        if(in_array($end_name_id, $neighbour_actors_ids)){
            return $degree[$curr_actor_name]+1;

        }
        //if not found,enqueue each node and setup $degree
        else{
            foreach($neighbour_actors_ids as $next_actor_id){
                $next_actor_name = actor_id_to_name($next_actor_id);

                $to_do_name ->enqueue($next_actor_name);
                if(!isset($degree[$next_actor_name]) || ($degree[$next_actor_name]> $degree[$curr_actor_name]+1)){
                    $degree[$next_actor_name]= $degree[$curr_actor_name]+1;
                }
            }

        }
    }
}

?>
